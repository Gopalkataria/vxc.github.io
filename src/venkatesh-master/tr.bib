@inproceedings{bib_Syst_2023, AUTHOR = {Mrityunjay Kumar, Venkatesh Choppella}, TITLE = {Systems Modeling for novice engineers to comprehend software products better}, BOOKTITLE = {Technical Report},
year = 2023 ,
keywords = {System Modeling, SaaS Product, Novice Engineer, Mental Model, Software System Comprehension} ,
abstract = { One of the key challenges for a novice engineer in a product company is to comprehend the product sufficiently and quickly. It can take anywhere from six months to several years for them to attain mastery but they need to start delivering results much before. SaaS (Software-as-a-Service) products have sophisticated system architecture which adds to the time and effort of understanding them. On the other hand, time available to new hires for product understanding continues to be short and getting shorter, given the pressure to deliver more in less time. Constructivist theory views learning as a personal process in which the learner constructs new knowledge for themselves. Building and refining a mental model is the key way in which they learn, similar to how the brain operates. This paper presents an approach to improve system comprehension process by using a system model that a) acts as a transitional object to aid and refine the mental model of the learner, and b) captures the current understanding of the dynamics of the software system in a way that can be reasoned with and simulated. We have adapted discrete systems modeling techniques and used a transition system as a lightweight modeling language. Such a model can be used by novice engineers during their product ramp-up phase to build a model of the software system that captures their knowledge of the system and aid their mental model. The paper also presents a learning approach in which the learners create and refine these models iteratively using the available and newly uncovered knowledge about the software system. We hypothesize that by leveraging this modeling},
doi = {arXiv:2304.13294}
}


@Report{2022-cemca-report,
  keywords =     {tech-report, algodynamics, cemca},
  author = 		 {Venkatesh Choppella},
  title = 		 {Design, Development and
Implementation of Data Structure
Experiments: Graph Traversal,
Minimum Spanning Tree and
Shortest Path Algorithms},
  type = 		 {},
  institution =  {IIIT Hyderabad},
  OPTyear = 	 {},
  date = 	 {2022-03-14},
  OPTkey = 		 {},
  subtitle =  {Consultant Report Submitted to Commonwealth Media Centre for Asia (CEMCA)},
  OPTtitleaddon = {},
  OPTlanguage =  {},
  OPTnumber = 	 {},
  OPTversion = 	 {},
  OPTnote = 	 {},
  OPTlocation =  {},
  OPTmonth = 	 {},
  OPTisrn = 	 {},
  OPTchapter = 	 {},
  OPTpages = 	 {},
  OPTpagetotal = {},
  OPTaddendum =  {},
  OPTpubstate =  {},
  OPTdoi = 		 {},
  OPTeprint = 	 {},
  OPTeprintclass = {},
  OPTeprinttype = {},
  url = 		 {https://www.cemca.org/ckfinder/userfiles/files/Development%20of%20Virtual%20Lab%20Experiments%20in%20Computer%20Science.pdf},
  urldate = 	 {May 2022},
  OPTannote = 	 {},
  pdf = {papers/2022-cemca.pdf}
}

@Report{2021-cemca-report,
  keywords =     {tech-report, algodynamics, cemca},
author = 		 {Venkatesh Choppella},
  title = 		 {Virtual Labs for Data Structures: Search and Mergesort},
  type = 		 {},
  institution =  {IIIT Hyderabad},
  OPTyear = 	 {},
  date = 	 {2021-06-15},
  OPTkey = 		 {},
  subtitle =  {Consultant Report Submitted to Commonwealth Media Centre for Asia (CEMCA)},
  OPTtitleaddon = {},
  OPTlanguage =  {},
  OPTnumber = 	 {},
  OPTversion = 	 {},
  OPTnote = 	 {},
  OPTlocation =  {},
  OPTmonth = 	 {},
  OPTisrn = 	 {},
  OPTchapter = 	 {},
  OPTpages = 	 {},
  OPTpagetotal = {},
  OPTaddendum =  {},
  OPTpubstate =  {},
  OPTdoi = 		 {},
  OPTeprint = 	 {},
  OPTeprintclass = {},
  OPTeprinttype = {},
  url = 		 {https://www.cemca.org/ckfinder/userfiles/files/Virtual%20Labs%20for%20Data%20Structures%20Search%20and%20Mergesort.pdf},
  urldate = 	 {May 2022},
  OPTannote = 	 {},
  pdf = {papers/2021-algodynamics-cemca-ws.pdf}
}


@Report{2021-algodynamics-cemca-ws,
  keywords =     {tech-report, algodynamics, cemca},
author = 		 {Venkatesh Choppella},
  title = 		 {Report on the 24-25th August 2021 Workshop on
                  Algodynamics Organized by Uttarakhand Open
                  University (UOU) in collaboration with Commonwealth
                  Educational Media Centre for Asia (CEMCA)},
  type = 		 {},
  institution =  {IIIT Hyderabad},
  OPTyear = 	 {},
  date = 	 {2021-08-31},
  OPTkey = 		 {},
  subtitle =  {Consultant Report Submitted to Commonwealth Media Centre for Asia (CEMCA)},
  OPTtitleaddon = {},
  OPTlanguage =  {},
  OPTnumber = 	 {},
  OPTversion = 	 {},
  OPTnote = 	 {},
  OPTlocation =  {},
  OPTmonth = 	 {},
  OPTisrn = 	 {},
  OPTchapter = 	 {},
  OPTpages = 	 {},
  OPTpagetotal = {},
  OPTaddendum =  {},
  OPTpubstate =  {},
  OPTdoi = 		 {},
  OPTeprint = 	 {},
  OPTeprintclass = {},
  OPTeprinttype = {},
  url = 		 {https://www.cemca.org/ckfinder/userfiles/files/Report%20on%20Workshop%20on%20Algodynamics%20by%20Prof_%20Choppella.pdf},
  urldate = 	 {May 2022},
  OPTannote = 	 {},
  pdf = {papers/2021-cemca.pdf}
}

@Report{2018-arxiv-choppella-et-al,
  keywords =     {tech-report, concurrency, control, feedback, dining-philosophers, arxiv},
  author = 		 {Venkatesh Choppella and Kasturi Viswanath and Arjun Sanjeev},
  title = 		 {Generalized Dining Philosophers and Feedback Control},
  type = 		 {article},
  institution =  {{IIIT} {H}yderabad},
  year = 	 {2018},
  date = 	 {2018-05-05},
  OPTkey = 		 {},
  OPTsubtitle =  {},
  OPTtitleaddon = {},
  OPTlanguage =  {},
  number = 	 {ar{X}iv:1805.02010v1},
  note = 	 {ar{X}iv:1805.02010v1},
  OPTlocation =  {},
  OPTmonth = 	 {},
  OPTisrn = 	 {},
  OPTchapter = 	 {},
  OPTpages = 	 {},
  OPTaddendum =  {},
  OPTpubstate =  {},
  OPTdoi = 		 {},
  OPTeprint = 	 {},
  OPTeprintclass = {},
  OPTeprinttype = {},
  url =   		 {https://arxiv.org/pdf/1805.02010.pdf},
  OPTurldate = 	 {},
  OPTannote = 	 {}
}


@TechReport{Adimoolam-Choppella-2013,
  keywords =   {tech-report, formal-methods, automata},
  author = 	 {Santosh Arvind Adimoolam and Venkatesh Choppella and PVR Murthy},
  title = 	 {Verifying Timed {CTL} contracts for continuous pure signal {I/O} automata by encoding as virtual environments},
  institution =  {International Institute of Information Technology Hyderabad},
  year = 	 {2013},
  OPTkey = 	 {},
  OPTtype = 	 {},
  number = 	 {IIIT/TR/2013/26},
  OPTaddress = 	 {},
  OPTmonth = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}



@TechReport{Alloy-Corp-Tech-2013,
keywords = {tech-report, web-sec, corp, Browsers, Mashups, Open APIs, Security, Web},
author = {Krishna Chaitanya Telikicherla and Venkatesh Choppella},
title = {{A}lloy model for {C}ross {O}rigin {R}equest {P}olicy ({CORP})},
number =  {IIIT/TR/2013/31},
institution = {IIIT-Hyderabad},
year = {2013},
month = {August},
note = {\url{http://web2py.iiit.ac.in/research_centres/publications/view_publication/techreport/112}},
}


@TechReport{Choppella-Haynes-1995,
  keywords = {tech-report, programming-languages, types, compilers, iu},
  author = 	 {Venkatesh Choppella and Chistopher T. Haynes},
  title = 	 {Diagnosis of Ill-typed Programs},
  institution =  {Indiana University},
  year = 	 {1995},
  OPTkey = 	 {},
  OPTtype = 	 {},
  number = 	 {426},
  OPTaddress = 	 {},
  month = 	 {February},
  OPTnote = 	 {},
  OPTannote = 	 {},
  OPTurl       =    {ftp://ftp.cs.indiana.edu/pub/techreports/TR426.pdf},
  pdf       =    {./papers/1995-iucs-tr426.pdf},
  OPTabstract = {A framework, based on syntactic and type constraints,
                  is provided for defining program slices that
                  contribute to a given type error or similar
                  syntactic property.  We specify soundness,
                  minimality and completeness criteria for these
                  slices and outline an algorithm for their lazy
                  evaluation.}}


@TechReport{Bradford-Choppella-Rawlins-1993,
  keywords = {tech-report, algorithms, iucs},
  author = 	 {Philip Bradford and Venkatesh Choppella and Gregory J. E. Rawlins},
  title = 	 {Lower Bounds for the Matrix Chain Order Problem},
  institution =  {Indiana University},
  year = 	 {1993},
  OPTkey = 	 {},
  OPTtype = 	 {},
  number = 	 {TR 391},
  OPTaddress = 	 {},
  month = 	 {October},
  OPTnote = 	 {},
  OPTannote = 	 {superceded by~\cite{bradford-choppella-rawlins-1995}},
  pdf = {./papers/1993-iucs-tr391.pdf},
}



@TechReport{choppella-sengupta-robertson-johnson-tr-2006,
  keywords = {tech-report, data-modelling, formal-methods, modelling, iucs},
  author = 	 {Venkatesh Choppella and Arijit Sengupta and Edward Robertson and Steven D.~Johnson},
  title = 	 {{C}onstructing and {V}alidating {E}ntity-{R}elationship models in the {PVS} {S}pecification {L}anguage: A case study using a text-book example},
  institution =  {Indiana University Computer Science},
  year = 	 {2006},
  OPTkey = 	 {},
  OPTtype = 	 {},
  number = 	 {632},
  OPTaddress = 	 {},
  month = 	 {April},
  OPTnote = 	 {},
  OPTannote = 	 {},
  pdf =          {./papers/2006-iucs-tr632.pdf},
  abstract = {    Data Modeling frameworks like the
                  Entity-Relationship (ER) approach are
                  usually specified using graphical and
                  natural language representations.  This
                  limits the ability to formally express and
                  verify the consistency of constraints on
                  data models.  The use of mathematical
                  notation makes the specification precise,
                  but also complex and tedious to write,
                  and, in the absence of automated support
                  for validation, error prone.  We use the
                  PVS specification language and its theorem
                  proving environment to formally construct,
                  reason with, and mechanically validate an
                  example data model at various levels of
                  abstraction.  The methodology proposed
                  here makes modeling resemble programming
                  in a strongly typed language.  Models are
                  implemented as PVS theories consisting of
                  type declarations, function definitions,
                  axioms and theorems.  Entities and
                  relationships are expressed as types.
                  Constraints on the data model are
                  expressed as axioms relating entity and
                  relationship sets.  Additional correctness
                  conditions are generated by PVS's type
                  checker.  Using the theory interpretation
                  mechanism of PVS, we prove the correctness
                  of the example's logical model with
                  respect to its ER model.  The example
                  model we consider has about fifteen
                  attributes, entities and relationships,
                  and twelve constraints.  The complete
                  hand-coded specification of the model is
                  about 600 lines of PVS (including
                  libraries).  Verification of the
                  correctness of the model reduces to
                  interactively proving about thirty
                  correctness conditions.  The proofs of
                  almost all of these are quite small (4
                  steps or less).  With modest additional
                  effort, it should be possible to
                  automatically generate the specification
                  and proofs, paving the way for automatic
                  verification of data models.  We see our
                  work as the initial step towards this
                  goal.  }
}


@TechReport{WSCL-2002,
  keywords = {tech-report, workflows, modelling, web-standards, w3c},
  author = 	 {A. Banerji and  C. Bartolino and D. Beringer and V. Choppella,
K. Govindarajan and  A. Karp and H. Kuno and M. Lemon and  G. Pogossiants and
S. Sharma and  S. Williams},
  title = 	 {Web Services Conversation Language (WSCL) 1.0},
  institution =  {Hewlett-Packard Company},
  year = 	 {2002},
  OPTkey = 	 {},
  OPTtype = 	 {},
  OPTnumber = 	 {},
  OPTaddress = 	 {},
  month = 	 {March},
  note = 	 {World Wide Web Consortium Note \url{http://www.w3.org/TR/wscl10}},
  OPTannote = 	 {},
  url       =    {http://www.w3.org/TR/wscl10},
  abstract = {
This document specifies the Web Services Conversation
Language. WSCL allows the abstract interfaces of Web services,
i.e. the business level conversations or public processes
supported by a Web service, to be defined. WSCL specifies the
XML documents being exchanged, and the allowed sequencing of
these document exchanges. WSCL conversation definitions are
themselves XML documents and can therefore be interpreted by Web
services infrastructures and development tools. WSCL may be used
in conjunction with other service description languages like
WSDL; for example, to provide protocol binding information for
abstract interfaces, or to specify the abstract interfaces
supported by a concrete service.  }
}
